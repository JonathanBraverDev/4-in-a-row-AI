(define (printBoard B)
  (cond
   ((not (empty? (rest B))) (println (first B)) (printBoard (rest B)))
   ((empty? (rest B)) (println (first B)))))

(define (findInBoard target B X Y)
  (cond
    ((equal? (getTileAt B (list X Y)) target) (list X Y))
    ((> Y (sub1 (length B))) #F)
    ((= X (sub1 (length (first B)))) (findInBoard target B 0 (add1 Y)))
    (else (findInBoard target B (add1 X) Y))))

(define (findInList target L)
  (cond
    ((empty? L) #F)
    ((equal? (state-board (first L)) (state-board target)) #T)
    (else (findInList target (rest L)))))

(define (outOfBounds? B X Y)
  (cond
    ((or (> 0 X) (> 0 Y) (< (sub1 (length (first B))) X) (< (sub1 (length B)) Y)) #T)
    (else #F)))

(define (updateBoard B Xpos Ypos input)
  (cond
    ((= Ypos 0) (cons (updateCol (first B) Xpos input) (rest B)))
    (else (cons (first B) (updateBoard (rest B) Xpos (sub1 Ypos) input)))))


(define (updateCol L Xpos input)
  (cond
    ((= Xpos 0) (cons input (rest L)))
    (else (cons (first L) (updateCol (rest L) (sub1 Xpos) input)))))


(define (getX input)
  (first input))


(define (getY input)
  (second input))


(define (getTileAt B pos)
  (list-ref (list-ref B (getY pos)) (getX pos)))

(define (countAttacks queensL index)
  (cond
    ((= index (length queensL)) 0)
    (else (+ (attackerCount queensL index) (countAttacks queensL (add1 index))))))

(define (attackerCount queensL queenNum)
  (+ (countDiaAttacks queensL queenNum 0) (rowAttacks queensL queenNum 0)))

(define (rowAttacks queensL queenNum index)
  (cond
    ((= index (length queensL)) 0)
    ((= index queenNum) (rowAttacks queensL queenNum (add1 index)))
    ((= (list-ref queensL queenNum) (list-ref queensL index)) (add1 (rowAttacks queensL queenNum (add1 index))))
    (else (rowAttacks queensL queenNum (add1 index)))))

(define (countDiaAttacks queensL queenNum index)
  (cond
    ((= index (length queensL)) 0)
    ((= index queenNum) (countDiaAttacks queensL queenNum (add1 index)))
    ((= (list-ref queensL queenNum) (+ (list-ref queensL index) (abs (- index queenNum)))) (add1 (countDiaAttacks queensL queenNum (add1 index))))
    ((= (list-ref queensL queenNum) (- (list-ref queensL index) (abs (- index queenNum)))) (add1 (countDiaAttacks queensL queenNum (add1 index))))
    (else (countDiaAttacks queensL queenNum (add1 index)))))

(define (listUntill L index counter)
  (cond
    ((= index 0) '())
    ((= (sub1 (length L)) index) (rest L))
    ((= counter index) '())
    (else (cons (list-ref L counter) (listUntill L index (add1 counter))))))

(define (listFrom L index)
  (cond 
    ((= index 0) L)
    ((= (length L) index) '())
    (else (cons (list-ref L index) (listFrom L (add1 index))))))

(define (randomIndexFrom L)
  (list-ref L (random (length L))))

(define (calcForEach queensL index)
  (cond
    ((= index (length queensL)) '())
    (else (cons (countAttacks (list-ref queensL index) 0) (calcForEach queensL (add1 index))))))

(define (printState state)
  (printBoard (state-board state))
  (print (F-g (state-F state))) (print '_)
  (println (F-h (state-F state))) (newline))
;  (print (state-parent state)))

(define (printStates L)
  (cond
    ((empty? L) 'done)
    (else (printState (first L)) (printStates (rest L)))))
  

